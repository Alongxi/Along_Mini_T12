C51 COMPILER V9.59.0.0   ZF_TIM                                                            07/02/2021 17:17:05 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE ZF_TIM
OBJECT MODULE PLACED IN .\Out_File\zf_tim.obj
COMPILER INVOKED BY: D:\APPDATA\Keil\C51\BIN\C51.EXE ..\..\Libraries\seekfree_libraries\zf_tim.c LARGE OPTIMIZE(9,SPEED)
                    - BROWSE INCDIR(..\..\Libraries\libraries;..\..\Libraries\seekfree_libraries;..\..\Libraries\seekfree_peripheral;..\USER\
                    -inc;..\USER\src;..\..\Libraries\GUI;..\..\Libraries\User;..\..\Libraries\User_lib) DEBUG OBJECTEXTEND PRINT(.\Out_File\z
                    -f_tim.lst) TABS(2) OBJECT(.\Out_File\zf_tim.obj)

line level    source

   1          /*********************************************************************************************************
             -************
   2           * COPYRIGHT NOTICE
   3           * Copyright (c) 2020,逐飞科技
   4           * All rights reserved.
   5           * 技术讨论QQ群：一群：179029047(已满)  二群：244861897(已满)  三群：824575535
   6           *
   7           * 以下所有内容版权均属逐飞科技所有，未经允许不得用于商业用途，
   8           * 欢迎各位使用并传播本程序，修改内容时必须保留逐飞科技的版权声明。
   9           *
  10           * @file          ctime
  11           * @company       成都逐飞科技有限公司
  12           * @author        逐飞科技(QQ790875685)
  13           * @version       查看doc内version文件 版本说明
  14           * @Software    MDK5.27
  15           * @Target core   STC8G8K64S4
  16           * @Taobao      https://seekfree.taobao.com/
  17           * @date          2020-4-14
  18           *********************************************************************************************************
             -***********/
  19          
  20          
  21          #include "zf_tim.h"
  22          #include "board.h"
  23          
  24          
  25          
  26          //--------------------------------------------------------------------------------------------------------
             ------------
  27          //  @brief      定时器初始化作为外部计数
  28          //  @param      tim_n           选择模块
  29          //  @return     void
  30          //  @since      v1.0
  31          //  Sample usage:               ctimer_count_init(CTIM0_P34);   //初始化定时器0，外部输入为P3.4引脚
  32          //  @note                       串口1使用定时器1作为波特率发生器，
  33          //                串口2使用定时器2作为波特率发生器，
  34          //                串口3使用定时器3作为波特率发生器，
  35          //                串口4使用定时器4作为波特率发生器，
  36          //                              STC8G仅有定时器0-定时器4，这5个定时器。
  37          //                编码器采集数据也需要定时器作为外部计数。
  38          //--------------------------------------------------------------------------------------------------------
             ------------
  39          void ctimer_count_init(CTIMN_enum tim_n)
  40          {
  41   1        switch(tim_n)
  42   1        {
  43   2          case CTIM0_P34:
  44   2          {
  45   3            TL0 = 0; 
  46   3            TH0 = 0; 
  47   3            TMOD |= 0x04; //外部计数模式
  48   3            TR0 = 1; //启动定时器
C51 COMPILER V9.59.0.0   ZF_TIM                                                            07/02/2021 17:17:05 PAGE 2   

  49   3            break;
  50   3          }
  51   2          
  52   2          case CTIM1_P35:
  53   2          {
  54   3            TL1 = 0x00;
  55   3            TH1 = 0x00;
  56   3            TMOD |= 0x40; // 外部计数模式
  57   3            TR1 = 1; // 启动定时器
  58   3            break;
  59   3          }
  60   2          
  61   2          case CTIM2_P12:
  62   2          {
  63   3            T2L = 0x00;
  64   3            T2H = 0x00;
  65   3            AUXR |= 0x18; // 设置外部计数模式并启动定时器
  66   3            break;
  67   3          }
  68   2          
  69   2          case CTIM3_P04:
  70   2          {
  71   3            T3L = 0; 
  72   3            T3H = 0;
  73   3            T4T3M |= 0x0c; // 设置外部计数模式并启动定时器
  74   3            break;
  75   3          }
  76   2          
  77   2          case CTIM4_P06:
  78   2          {
  79   3            T4L = 0;
  80   3            T4H = 0;
  81   3            T4T3M |= 0xc0; // 设置外部计数模式并启动定时器
  82   3            break;
  83   3          }
  84   2        
  85   2        } 
  86   1      } 
  87          
  88          //--------------------------------------------------------------------------------------------------------
             ------------
  89          //  @brief      获取计数数值
  90          //  @param      countch     计数通道号及引脚
  91          //  @return     uint32      返回计数值
  92          //  Sample usage:           num = ctimer_count_read(CTIM0_P34);     
  93          //--------------------------------------------------------------------------------------------------------
             ------------
  94          uint16 ctimer_count_read(CTIMN_enum tim_n)
  95          {
  96   1        uint16 dat;
  97   1        
  98   1        switch(tim_n)
  99   1        {
 100   2          case CTIM0_P34:
 101   2          {
 102   3            dat = (uint8)TH0 << 8;
 103   3            dat = ((uint8)TL0) | dat;
 104   3            break;
 105   3          }
 106   2          case CTIM1_P35:
 107   2          {
 108   3            dat = (uint8)TH1 << 8;
C51 COMPILER V9.59.0.0   ZF_TIM                                                            07/02/2021 17:17:05 PAGE 3   

 109   3            dat = ((uint8)TL1) | dat;
 110   3            break;
 111   3          }
 112   2          case CTIM2_P12:
 113   2          {
 114   3            dat = (uint8)T2H << 8;
 115   3            dat = ((uint8)T2L) | dat;
 116   3            break;
 117   3          }
 118   2          case CTIM3_P04:
 119   2          {
 120   3            dat = (uint8)T3H << 8;
 121   3            dat = ((uint8)T3L) | dat; 
 122   3            break;
 123   3          }
 124   2          case CTIM4_P06:
 125   2          {
 126   3            dat = (uint8)T4H << 8;
 127   3            dat = ((uint8)T4L) | dat;
 128   3            break;
 129   3          }
 130   2          
 131   2        }
 132   1      
 133   1      
 134   1        return dat;
 135   1      }
 136          
 137          
 138          //--------------------------------------------------------------------------------------------------------
             ------------
 139          //  @brief      清除计数数值
 140          //  @param      countch     计数通道号及引脚
 141          //  @return     void      
 142          //  Sample usage:           ctimer_count_clean(CTIM0_P34);     
 143          //--------------------------------------------------------------------------------------------------------
             ------------
 144          void ctimer_count_clean(CTIMN_enum tim_n)
 145          { 
 146   1        switch(tim_n)
 147   1        {
 148   2          case CTIM0_P34:
 149   2          {
 150   3            TR0 = 0;
 151   3            TH0 = 0;
 152   3            TL0 = 0;
 153   3            TR0 = 1;
 154   3            break;
 155   3          }
 156   2          case CTIM1_P35:
 157   2          {
 158   3            TR1 = 0;
 159   3            TH1 = 0;
 160   3            TL1 = 0;
 161   3            TR1 = 1;
 162   3            break;
 163   3          }
 164   2          case CTIM2_P12:
 165   2          {
 166   3            AUXR &= ~(1<<4);
 167   3            T2H = 0;
 168   3            T2L = 0;
C51 COMPILER V9.59.0.0   ZF_TIM                                                            07/02/2021 17:17:05 PAGE 4   

 169   3            AUXR |= 1<<4;
 170   3            break;
 171   3          }
 172   2          case CTIM3_P04:
 173   2          {
 174   3            T4T3M &= ~(1<<3);
 175   3            T3H = 0;
 176   3            T3L = 0;
 177   3            T4T3M |= (1<<3);
 178   3            break;
 179   3          }
 180   2          case CTIM4_P06:
 181   2          {
 182   3            T4T3M &= ~(1<<7);
 183   3            T4H = 0;
 184   3            T4L = 0;
 185   3            T4T3M |= (1<<7);
 186   3            break;
 187   3          }
 188   2        }
 189   1      }
 190          
 191          //--------------------------------------------------------------------------------------------------------
             ------------
 192          //  @brief      定时器周期中断
 193          //  @param      tim_n      定时器通道号
 194          //  @param      time_ms    时间(ms)
 195          //  @return     void      
 196          //  Sample usage:          pit_timer_ms(TIM_0, 10)
 197          //               使用定时器0做周期中断，时间10ms一次。
 198          //--------------------------------------------------------------------------------------------------------
             ------------
 199          void pit_timer_ms(TIMN_enum tim_n,uint16 time_ms)
 200          {
 201   1        uint16 temp;
 202   1        temp = 65536 - (sys_clk / (12 * (1000 / time_ms)));
 203   1        
 204   1        if(TIM_0 == tim_n)
 205   1        {
 206   2          TMOD |= 0x00;   // 模式 0
 207   2          TL0 = temp;   
 208   2          TH0 = temp >> 8;
 209   2          TR0 = 1;    // 启动定时器
 210   2          ET0 = 1;    // 使能定时器中断
 211   2        }
 212   1        else if(TIM_1 == tim_n)
 213   1        {
 214   2          TMOD |= 0x00; // 模式 0
 215   2          TL1 = temp;   
 216   2          TH1 = temp >> 8;
 217   2          TR1 = 1; // 启动定时器
 218   2          ET1 = 1; // 使能定时器中断
 219   2        }
 220   1        else if(TIM_2 == tim_n)
 221   1        {
 222   2          T2L = temp;   
 223   2          T2H = temp >> 8;
 224   2          AUXR |= 0x10; // 启动定时器
 225   2          IE2 |= 0x04; // 使能定时器中断
 226   2        }
 227   1        else if(TIM_3 == tim_n)
 228   1        {
C51 COMPILER V9.59.0.0   ZF_TIM                                                            07/02/2021 17:17:05 PAGE 5   

 229   2          T3L = temp;   
 230   2          T3H = temp >> 8;
 231   2          T4T3M |= 0x08; // 启动定时器
 232   2          IE2 |= 0x20; // 使能定时器中断
 233   2        }
 234   1        else if(TIM_4 == tim_n)
 235   1        {
 236   2          T4L = temp;   
 237   2          T4H = temp >> 8;
 238   2          T4T3M |= 0x80; // 启动定时器
 239   2          IE2 |= 0x40; // 使能定时器中断
 240   2        }
 241   1      }
 242          
 243          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    350    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----       1
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
